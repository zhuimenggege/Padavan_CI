name: 编译tsl0922-Padavan-4.4

on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: '请选择你的路由器型号'
        options:
        - Phicomm_K2P-USB
        - Phicomm_K2P
        default: Phicomm_K2P
      plugins:
        description: '请选择你需要集成的插件 y 表示集成  n 表示不集成'
        required: true
        default: '{"vpnsvr":"n","vpncli":"n","vpncmd":"n","ss":"n","v2ray":"n","xray":"n","trojan":"n","singbox":"n","naiveproxy":"n","ssobfs":"n","dnsforwarder":"n","adbyby":"n","adguardhome":"n","smartdns":"n","aliddns":"n","zerotier":"n","ddnsto":"n","wireguard":"n","frpc":"n","aldrive":"n","sqm":"n","mentohust":"n","scutclient":"n","njitclient":"n","minieap":"n","dogcom":"n","transmission":"n","aria":"n","ariaweb":"n"}'
      firmwarever:
        description: '自定义固件版本号，默认为当天编译日期'
        required: false
        default: ''
env:
  REPOSITORY_URL: https://github.com/tsl0922/padavan.git
  WORK_PATH: /opt/padavan-4.4
  TIME_ZONE: Asia/Shanghai
  FIRMWARE_DATEPREFIX: $(date +"%Y%m%d")
  FIRMWARE_AUTHOR: tsl0922
  FIRMWARE_PATH: /opt/firmwares
  firmwarever: "${{ github.event.inputs.firmwarever }}"
jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - uses: actions/checkout@v4
    - uses: hendrikmuhs/ccache-action@main
    - uses: Bonnie2980/variable-mapper@master
      id: export
      with:
        key: "${{ github.event.inputs.target }}"
        map: |
            "Phicomm_K2P-USB": {
              "model": "K2P-USB"
            },
            "Phicomm_K2P": {
              "model": "K2P"
            },
        export_to: env
        mode: first_match
    - name: 获取最新go版本
      run: |
          latest_version=$(curl -L -k -s https://golang.org/dl/?mode=json | grep -m 1 -o '"version": "[^"]*' | sed 's/"version": "//' | tr -d 'go" ')
          echo "go版本=$latest_version"
          echo "gotag=$latest_version" >> $GITHUB_ENV
    - name: 安装最新go
      uses: actions/setup-go@v5
      with:
        go-version: '${{ env.gotag }}'
        check-latest: true
        cache: false
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        check-latest: true
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
        fakeroot kmod cpio git python3-docutils gettext automake autopoint \
        texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin libev-dev
        sudo timedatectl set-timezone "$TIME_ZONE"
    - name: 克隆padavan源码
      run: |
        git clone --depth=1 $REPOSITORY_URL $WORK_PATH
        cd $WORK_PATH
        sed -i '/cp -f/d' Makefile
    - name: 获取用户输入的集成插件
      run: |
        echo "vpnsvr=${{fromJson(github.event.inputs.plugins).vpnsvr}}" >> $GITHUB_ENV
        echo "vpncli=${{fromJson(github.event.inputs.plugins).vpncli}}" >> $GITHUB_ENV
        echo "vpncmd=${{fromJson(github.event.inputs.plugins).vpncmd}}" >> $GITHUB_ENV
        echo "ss=${{fromJson(github.event.inputs.plugins).ss}}" >> $GITHUB_ENV
        echo "v2ray=${{fromJson(github.event.inputs.plugins).v2ray}}" >> $GITHUB_ENV
        echo "xray=${{fromJson(github.event.inputs.plugins).xray}}" >> $GITHUB_ENV
        echo "trojan=${{fromJson(github.event.inputs.plugins).trojan}}" >> $GITHUB_ENV
        echo "singbox=${{fromJson(github.event.inputs.plugins).singbox}}" >> $GITHUB_ENV
        echo "naiveproxy=${{fromJson(github.event.inputs.plugins).naiveproxy}}" >> $GITHUB_ENV
        echo "ssobfs=${{fromJson(github.event.inputs.plugins).ssobfs}}" >> $GITHUB_ENV
        echo "dnsforwarder=${{fromJson(github.event.inputs.plugins).dnsforwarder}}" >> $GITHUB_ENV
        echo "adbyby=${{fromJson(github.event.inputs.plugins).adbyby}}" >> $GITHUB_ENV
        echo "adguardhome=${{fromJson(github.event.inputs.plugins).adguardhome}}" >> $GITHUB_ENV
        echo "smartdns=${{fromJson(github.event.inputs.plugins).smartdns}}" >> $GITHUB_ENV
        echo "aliddns=${{fromJson(github.event.inputs.plugins).aliddns}}" >> $GITHUB_ENV
        echo "zerotier=${{fromJson(github.event.inputs.plugins).zerotier}}" >> $GITHUB_ENV
        echo "ddnsto=${{fromJson(github.event.inputs.plugins).ddnsto}}" >> $GITHUB_ENV
        echo "wireguard=${{fromJson(github.event.inputs.plugins).wireguard}}" >> $GITHUB_ENV
        echo "frpc=${{fromJson(github.event.inputs.plugins).frpc}}" >> $GITHUB_ENV
        echo "aldrive=${{fromJson(github.event.inputs.plugins).aldrive}}" >> $GITHUB_ENV
        echo "sqm=${{fromJson(github.event.inputs.plugins).sqm}}" >> $GITHUB_ENV
        echo "mentohust=${{fromJson(github.event.inputs.plugins).mentohust}}" >> $GITHUB_ENV
        echo "scutclient=${{fromJson(github.event.inputs.plugins).scutclient}}" >> $GITHUB_ENV
        echo "njitclient=${{fromJson(github.event.inputs.plugins).njitclient}}" >> $GITHUB_ENV
        echo "minieap=${{fromJson(github.event.inputs.plugins).minieap}}" >> $GITHUB_ENV
        echo "dogcom=${{fromJson(github.event.inputs.plugins).dogcom}}" >> $GITHUB_ENV
        echo "transmission=${{fromJson(github.event.inputs.plugins).transmission}}" >> $GITHUB_ENV
        echo "aria=${{fromJson(github.event.inputs.plugins).aria}}" >> $GITHUB_ENV
        echo "ariaweb=${{fromJson(github.event.inputs.plugins).ariaweb}}" >> $GITHUB_ENV
    - name: 自定义配置文件
      run: |
        cd $WORK_PATH/trunk
        if [ ! -f configs/templates/${{ env.model }}.config ] ; then
        echo "configs/templates/${{ env.model }}.config not found"
        exit 1
        fi
        cp -f configs/templates/${{ env.model }}.config .config

        ################################################################################################
        #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
        ################################################################################################
        ###  清除默认配置###
        sed -i '/CONFIG_FIRMWARE_ENABLE_IPV6/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_USB/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_UFSD/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_FAT/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXFAT/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXT2/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXT3/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXT4/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_XFS/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_FUSE/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_SWAP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_UVC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HID/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SERIAL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_AUDIO/d' .config

        sed -i '/CONFIG_FIRMWARE_INCLUDE_XFRM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_QOS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IMQ/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IFB/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IPSET/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NFSD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NFSC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_CIFS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NTFS_3G/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_LPRD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_U2EC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TCPDUMP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HDPARM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_PARTED/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMBD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMBD36/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WINS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMBD_SYSLOG/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FTPD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_RPL2TP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_EAP_PEAP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DDNS_SSL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HTTPS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SFTP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DROPBEAR/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DROPBEAR_FAST_CODE/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSH/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENVPN/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSWAN/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_XUPNPD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIDLNA/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FIREFLY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FFMPEG_NEW/d' .config

        
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TRANSMISSION/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TRANSMISSION_WEB_CONTROL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ARIA/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ARIA_WEB_CONTROL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_CURL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_GDUT_DRCOM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DOGCOM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIEAP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NAPT66/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_VLMCSD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TTYD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_LRZSZ/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HTOP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NANO/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IPERF3/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DUMP1090/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_RTL_SDR/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MTR/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOCAT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WIREGUARD/d' .config   
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ZEROTIER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_V2RAY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_XRAY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TROJAN/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSOBFS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NPC/d' .config
        sed -i '/CONFIG_FIRMWARE_WEBUI_HIDE_VPN/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENVPN/d' .config
        # 清除默认配置结束
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ######################################################################
        #以下选项是定义你需要的功能（y=集成,n=忽略），重新写入到.config文件
        ######################################################################
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER=${{env.vpnsvr}}" >> .config #SOFTETHERVPN
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT=${{env.vpncli}}" >> .config #SOFTETHERVPN
        echo "CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD=${{env.vpncmd}}" >> .config #SOFTETHERVPN
        #科学相关
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=${{env.ss}}" >> .config #SS plus+
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=${{env.v2ray}}" >> .config #集成v2ray执行文件（3.8M左右)
        echo "CONFIG_FIRMWARE_INCLUDE_XRAY=${{env.xray}}" >> .config #集成xray执行文件(5.6M左右)，可以代替v2ray，注：如果闪存太小不够还是建议使用v2ray
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=${{env.trojan}}" >> .config #集成trojan执行文件(1.1M左右)
        echo "CONFIG_FIRMWARE_INCLUDE_SINGBOX=${{env.singbox}}" >> .config #集成Singbox执行文件
        echo "CONFIG_FIRMWARE_INCLUDE_NAIVEPROXY=${{env.naiveproxy}}" >> .config #集成Naiveproxy执行文件
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=${{env.ssobfs}}" >> .config # simple-obfs混淆插件
        echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=n" >> .config #SS server
        #
        echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #可以不集成
        echo "CONFIG_FIRMWARE_INCLUDE_TUNSAFE=n" >> .config #tunsafe
        echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=${{env.dnsforwarder}}" >> .config #dnsforwarder
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=${{env.adbyby}}" >> .config #adbyby plus+
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=${{env.adguardhome}}" >> .config #adguardhome
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=${{env.smartdns}}" >> .config #smartdns
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=${{env.aliddns}}" >> .config #阿里DDNS
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=${{env.zerotier}}" >> .config #zerotier ~1.3M
        echo "CONFIG_FIRMWARE_INCLUDE_DDNSTO=${{env.ddnsto}}" >> .config #ddnsto
        echo "CONFIG_FIRMWARE_INCLUDE_WIREGUARD=${{env.wireguard}}" >> .config #wireguard
        echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #frp server
        echo "CONFIG_FIRMWARE_INCLUDE_FRPC=${{env.frpc}}" >> .config #frp client
        #
        echo "CONFIG_FIRMWARE_INCLUDE_ALDRIVER=${{env.aldrive}}" >> .config #阿里云盘
        echo "CONFIG_FIRMWARE_INCLUDE_SQM=${{env.sqm}}" >> .config #QOS流控
        #
        #
        echo "CONFIG_FIRMWARE_INCLUDE_TRANSMISSION=${{env.transmission}}" >> .config #Transmission
        echo "CONFIG_FIRMWARE_INCLUDE_ARIA=${{env.aria}}" >> .config #Aria
        echo "CONFIG_FIRMWARE_INCLUDE_ARIA_WEB_CONTROL=${{env.ariaweb}}" >> .config #Aria Web
        #
        #校园网相关开始
        #echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=${{env.mentohust}}" >> .config #MENTOHUST
        #echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=${{env.scutclient}}" >> .config #SCUTCLIENT
        #echo "CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT=${{env.njitclient}}" >> .config
        #echo "CONFIG_FIRMWARE_INCLUDE_MINIEAP=${{env.minieap}}" >> .config
        #echo "CONFIG_FIRMWARE_INCLUDE_DOGCOM=${{env.dogcom}}" >> .config
        #校园网相关结束
        #########################################################################################
        #自定义添加其它功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
        #格式如下：
        #sed -i '/自定义项/d' .config
        #echo "自定义项=y" >> .config
        if [[ "$firmwarever" != "" ]] ; then
           sed -i "s/FIRMWARE_BUILDS_REV=.*/FIRMWARE_BUILDS_REV=${firmwarever}/g" ./versions.inc
           echo '更新版本号时间${firmwarever}'
        fi
        #########################################################################################
    - name: 开始编译
      run: |
        cd $WORK_PATH
        #去掉编译警告中断编译
        sed -i "s/-Wall/-w/g" ./trunk/linux-4.4.x/Makefile
        #修改adg为最新版本
        adg_tag="$( curl -L --connect-timeout 3 -s  https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest  2>&1 | grep 'tag_name' | cut -d\" -f4 | tr -d 'v')"
        sed -i "s/^\(PKG_VERSION:=\).*/\1$adg_tag/g" ./trunk/user/adguardhome/Makefile
        sed -i "s/^\(PKG_HASH:=\).*/\1skip/g" ./trunk/user/adguardhome/Makefile
        rm -rf ./trunk/user/adguardhome/patches
        #修改v2ray最新
        v2ray_tag="$( curl -L --connect-timeout 3 -s  https://api.github.com/repos/v2fly/v2ray-core/releases/latest  2>&1 | grep 'tag_name' | cut -d\" -f4 | tr -d 'v')"
        sed -i "s/^\(PKG_VERSION:=\).*/\1$v2ray_tag/g" ./trunk/user/v2ray/Makefile
        sed -i "s/^\(PKG_HASH:=\).*/\1skip/g" ./trunk/user/v2ray/Makefile
        #修改xray最新
        xray_tag="$( curl -L --connect-timeout 3 -s  https://api.github.com/repos/XTLS/Xray-core/releases/latest  2>&1 | grep 'tag_name' | cut -d\" -f4 | tr -d 'v')"
        sed -i "s/^\(PKG_VERSION:=\).*/\1$xray_tag/g" ./trunk/user/xray/Makefile
        sed -i "s/^\(PKG_HASH:=\).*/\1skip/g" ./trunk/user/xray/Makefile
        #修改naiveproxy版本
        nai_tag="$( curl -L --connect-timeout 3 -s  https://api.github.com/repos/klzgrad/naiveproxy/releases/latest  2>&1 | grep 'tag_name' | cut -d\" -f4 | tr -d 'v')"
        sed -i "s/^\(PKG_VERSION:=\).*/\1$nai_tag/g" ./trunk/user/naiveproxy/Makefile
        sed -i 's/HASH:=.*$/HASH:=skip/g' ./trunk/user/naiveproxy/Makefile
        #修改Aria2
        sed -i 's|-fvisibility=hidden|-fvisibility=hidden -I\$(ROOTDIR)/stage/include/libxml2|g' ./trunk/user/aria2/Makefile
        sed -i 's|-static-libstdc++|-static-libstdc++ -L\$(ROOTDIR)/stage/lib|g'  ./trunk/user/aria2/Makefile
        sed -i 's|--prefix=/usr|--prefix=/usr CXXFLAGS="\$(CFLAGS)"|g' ./trunk/user/aria2/Makefile
        
        echo "开始编译${{ env.model }}"
        sudo make ${{ env.model }} TOOLCHAIN=mipsel-linux-musl
        echo "FIRMWARE_DATEPREFIX=$(date +"%Y%m%d")" >> $GITHUB_ENV
    - name: 打包命名固件
      id: organize
      run: |
        mkdir -p $FIRMWARE_PATH/
        cd $WORK_PATH/trunk/images
        for firmwarefile in $(ls *.trx)
        do 
        trxmd5=$(md5sum $firmwarefile | awk '{print $1}')
        sudo mv $firmwarefile $FIRMWARE_PATH/${trxmd5}-${FIRMWARE_DATEPREFIX}"_"${FIRMWARE_AUTHOR}"_"${{ env.model }}"_padavan4.4.trx"
        done
        cd $FIRMWARE_PATH
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "STATUS=success" >> $GITHUB_ENV
    - name : 上传固件包
      uses: actions/upload-artifact@main
      if: env.STATUS == 'success'
      with:
        name: ${{ env.model }}_padavan4.4
        path: ${{ env.FIRMWARE }}
