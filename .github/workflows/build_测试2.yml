name: Build 测试2
on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: 'target to compile'
        options:
        - Gee_B70
        - Nokia-Sbell_A-040W-Q
        - Xiaomi_CR6606
        - Xiaomi_CR6608
        - Xiaomi_CR6609
        - DLINK_DIR-878
        - DLINK_DIR-882
        - JCG_836PRO
        - JCG_AC860M
        - JCQ_Q20
        - JCQ_Q10Pro
        - JCG_Y2
        - Phicomm_K2P-USB
        - Phicomm_K2P
        - Xiaomi_4
        - Xiaomi_R3G
        - Xiaomi_R3P-PB
        - Xiaomi_R3P
        - Motorola_MR2600
        - Raisecom_MSG1500_X.00
        - Diting_NEWIFI3
        - Xiaomi_AC2100
        - Redmi_AC2100
        - Asus_RT-AC85P
        - Youhua_WR1200JS
        - Youhua_WR330
        - Xiaoyu_C1
        - Xiaoyu_C3
        - Xiaoyu_C5
        - ZTE_E8820S
        default: Phicomm_K2P-USB
      plugins:
        description: 'json format string of include configs'
        required: true
        default: '{"dropbear":"y","code":"y","ttyd":"y","antfs":"y","ipset":"y","nfsd":"y","nfsc":"y","cifs":"y","hdparm":"y","parted":"y","smbd":"y","ftpd":"y","peap":"y","https":"y","curl":"y","sqm":"y","ltte":"y","lrzsz":"y","smartdns":"y","aria2":"n","ariaweb":"n"}'
      firmwarever:
        description: 'firmware''s version'
        required: true
        default: '20240209'
env:
  REPOSITORY_URL: https://github.com/zhuimenggege/padavan-1.git
  WORK_PATH: /opt/padavan-4.4
  TIME_ZONE: Asia/Shanghai
  FIRMWARE_DATEPREFIX: $(date +"%Y%m%d")
  FIRMWARE_AUTHOR: tsl0922
  FIRMWARE_PATH: /opt/firmwares
jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - uses: actions/checkout@v4
    - uses: hendrikmuhs/ccache-action@v1.2.12
    - uses: Bonnie2980/variable-mapper@master
      id: export
      with:
        key: "${{ github.event.inputs.target }}"
        map: |
          {
            "Gee_B70": {
              "model": "B70"
            },
            "Nokia-Sbell_A-040W-Q": {
              "model": "BELL-A040WQ"
            },
            "Xiaomi_CR6606": {
              "model": "CR660x"
            },
            "Xiaomi_CR6608": {
              "model": "CR660x"
            },
            "Xiaomi_CR6609": {
              "model": "CR660x"
            },
            "DLINK_DIR-878": {
              "model": "DIR-878"
            },
            "DLINK_DIR-882": {
              "model": "DIR-882"
            },
            "JCG_836PRO": {
              "model": "JCG-836PRO"
            },
            "JCG_AC860M": {
              "model": "JCG-AC860M"
            },
            "JCQ_Q20": {
              "model": "JCG-Q20"
            },
            "JCQ_Q10Pro": {
              "model": "JCG-Q20"
            },
            "JCG_Y2": {
              "model": "JCG-Y2"
            },
            "Phicomm_K2P-USB": {
              "model": "K2P-USB"
            },
            "Phicomm_K2P": {
              "model": "K2P"
            },
            "Xiaomi_4": {
              "model": "MI-4"
            },
            "Xiaomi_R3G": {
              "model": "MI-R3G"
            },
            "Xiaomi_R3P-PB": {
              "model": "MI-R3P-PB"
            },
            "Xiaomi_R3P": {
              "model": "MI-R3P"
            },
            "Motorola_MR2600": {
              "model": "MR2600"
            },
            "Raisecom_MSG1500_X.00": {
              "model": "MSG1500"
            },
            "Diting_NEWIFI3": {
              "model": "NEWIFI3"
            },
            "Xiaomi_AC2100": {
              "model": "R2100"
            },
            "Redmi_AC2100": {
              "model": "RM2100"
            },
            "Asus_RT-AC85P": {
              "model": "RT-AC85P"
            },
            "Youhua_WR1200JS": {
              "model": "WR1200JS"
            },
            "Youhua_WR330": {
              "model": "WR1200JS"
            },
            "Xiaoyu_C1": {
              "model": "XY-C1"
            },
            "Xiaoyu_C3": {
              "model": "XY-C1"
            },
            "Xiaoyu_C5": {
              "model": "XY-C1"
            },
            "ZTE_E8820S": {
              "model": "ZTE-E8820S"
            },
            ".*": {
              "model": "K2P"
            }
          }
        export_to: env
        mode: first_match
    - uses: actions/setup-go@v5
      with:
        go-version: '1.20'
        check-latest: true
        cache: false
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        check-latest: true
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
        fakeroot kmod cpio git python3-docutils gettext automake autopoint \
        texinfo build-essential help2man pkg-config zlib1g-dev libgmp3-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget libc-dev-bin libev-dev
        sudo timedatectl set-timezone "$TIME_ZONE"
    - name: Clone source code
      run: |
        git clone --depth=1 $REPOSITORY_URL $WORK_PATH
        cd $WORK_PATH
        sed -i '/cp -f/d' Makefile
    - name: Parse json string of include plugins
      run: |
        echo "dropbear=${{fromJson(github.event.inputs.plugins).dropbear}}" >> $GITHUB_ENV
        echo "cod=${{fromJson(github.event.inputs.plugins).code}}" >> $GITHUB_ENV
        echo "ttyd=${{fromJson(github.event.inputs.plugins).ttyd}}" >> $GITHUB_ENV
        echo "antfs=${{fromJson(github.event.inputs.plugins).antfs}}" >> $GITHUB_ENV
        echo "ipset=${{fromJson(github.event.inputs.plugins).ipset}}" >> $GITHUB_ENV
        echo "nfsd=${{fromJson(github.event.inputs.plugins).nfsd}}" >> $GITHUB_ENV
        echo "nfsc=${{fromJson(github.event.inputs.plugins).nfsc}}" >> $GITHUB_ENV
        echo "cifs=${{fromJson(github.event.inputs.plugins).cifs}}" >> $GITHUB_ENV
        echo "hdparm=${{fromJson(github.event.inputs.plugins).hdparm}}" >> $GITHUB_ENV
        echo "parted=${{fromJson(github.event.inputs.plugins).parted}}" >> $GITHUB_ENV
        echo "smbd=${{fromJson(github.event.inputs.plugins).smbd}}" >> $GITHUB_ENV
        echo "ftpd=${{fromJson(github.event.inputs.plugins).ftpd}}" >> $GITHUB_ENV
        echo "peap=${{fromJson(github.event.inputs.plugins).peap}}" >> $GITHUB_ENV
        echo "hppts=${{fromJson(github.event.inputs.plugins).hppts}}" >> $GITHUB_ENV
        echo "curl=${{fromJson(github.event.inputs.plugins).curl}}" >> $GITHUB_ENV
        echo "sqm=${{fromJson(github.event.inputs.plugins).sqm}}" >> $GITHUB_ENV
        echo "lrzsz=${{fromJson(github.event.inputs.plugins).lrzsz}}" >> $GITHUB_ENV
        echo "smartdns=${{fromJson(github.event.inputs.plugins).smartdns}}" >> $GITHUB_ENV
        echo "frpc=${{fromJson(github.event.inputs.plugins).frpc}}" >> $GITHUB_ENV
        echo "aldrive=${{fromJson(github.event.inputs.plugins).aldrive}}" >> $GITHUB_ENV
        echo "sqm=${{fromJson(github.event.inputs.plugins).sqm}}" >> $GITHUB_ENV
        echo "mentohust=${{fromJson(github.event.inputs.plugins).mentohust}}" >> $GITHUB_ENV
        echo "scutclient=${{fromJson(github.event.inputs.plugins).scutclient}}" >> $GITHUB_ENV
        echo "njitclient=${{fromJson(github.event.inputs.plugins).njitclient}}" >> $GITHUB_ENV
        echo "minieap=${{fromJson(github.event.inputs.plugins).minieap}}" >> $GITHUB_ENV
        echo "dogcom=${{fromJson(github.event.inputs.plugins).dogcom}}" >> $GITHUB_ENV
        echo "transmission=${{fromJson(github.event.inputs.plugins).transmission}}" >> $GITHUB_ENV
        echo "aria=${{fromJson(github.event.inputs.plugins).aria2}}" >> $GITHUB_ENV
        echo "ariaweb=${{fromJson(github.event.inputs.plugins).ariaweb}}" >> $GITHUB_ENV
    - name: Custom config
      run: |
        cd $WORK_PATH/trunk
        if [ ! -f configs/templates/${{ env.model }}.config ] ; then
        echo "configs/templates/${{ env.model }}.config not found"
        exit 1
        fi
        cp -f configs/templates/${{ env.model }}.config .config
        ################################################################################################
        #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
        ################################################################################################
        ###  清除默认配置###
        sed -i '/CONFIG_FIRMWARE_ENABLE_IPV6/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_USB/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ANTFS/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_FAT/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXFAT/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXT2/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXT3/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_EXT4/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_XFS/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_FUSE/d' .config
        sed -i '/CONFIG_FIRMWARE_ENABLE_SWAP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_UVC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HID/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SERIAL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_AUDIO/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_XFRM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_QOS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IMQ/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IFB/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IPSET/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NFSD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NFSC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_CIFS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NTFS_3G/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_LPRD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_U2EC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TCPDUMP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HDPARM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_PARTED/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMBD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMBD36/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WINS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMBD_SYSLOG/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FTPD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_RPL2TP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_EAP_PEAP/d' .config  
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DDNS_SSL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HTTPS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SFTP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DROPBEAR/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DROPBEAR_FAST_CODE/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSH/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENVPN/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSWAN/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_XUPNPD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIDLNA/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FIREFLY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FFMPEG_NEW/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TRANSMISSION/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ARIA/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ARIA_WEB_CONTROL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_CURL/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_GDUT_DRCOM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DOGCOM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MINIEAP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NAPT66/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_VLMCSD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TTYD/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MSD_LITE/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_LRZSZ/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_HTOP/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NANO/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_IPERF3/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DUMP1090/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_RTL_SDR/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MTR/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOCAT/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ZEROTIER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_XRAY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_V2RAY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SINGBOX/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TROJAN/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSOBFS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NAIVEPROXY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DDNSTO/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALDRIVER/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SQM/d' .config
        sed -i '/CONFIG_FIRMWARE_INCLUDE_WIREGUARD/d' .config
        # 清除默认配置结束
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        ######################################################################
        #以下选项是定义你需要的功能（y=集成,n=忽略），重新写入到.config文件
        ######################################################################
        echo "CONFIG_FIRMWARE_INCLUDE_DROPBEAR=${{env.dropbear}}" >> .config #SSH 服务器
        echo "CONFIG_FIRMWARE_INCLUDE_DROPBEAR_FAST_CODE=${{env.code}}" >> .config #加密服务
        echo "CONFIG_FIRMWARE_INCLUDE_TTYD=${{env.ttyd}}" >> .config #ttyd 服务器
        ##usb相关
        echo "CONFIG_FIRMWARE_INCLUDE_ANTFS=${{env.antfs}}" >> .config #ANTFS文件系统

        #
        echo "CONFIG_FIRMWARE_INCLUDE_IPSET=${{env.ipset}}" >> .config #ipset内核与工具
        echo "CONFIG_FIRMWARE_INCLUDE_NFSD=${{env.nfsd}}" >> .config #nfsv3服务器
        echo "CONFIG_FIRMWARE_INCLUDE_NFSC=${{env.nfsc}}" >> .config #nfsv3客户端
        echo "CONFIG_FIRMWARE_INCLUDE_CIFS=${{env.cifs}}" >> .config #smb文件共享客户端
        echo "CONFIG_FIRMWARE_INCLUDE_HDPARM=${{env.hdparm}}" >> .config #磁盘测试工具
        echo "CONFIG_FIRMWARE_INCLUDE_PARTED=${{env.parted}}" >> .config #磁盘管理工具
        echo "CONFIG_FIRMWARE_INCLUDE_SMBD=${{env.smbd}}" >> .config #smb3.6客户端
        echo "CONFIG_FIRMWARE_INCLUDE_FTPD=${{env.ftpd}}" >> .config #ftp服务器
        echo "CONFIG_FIRMWARE_INCLUDE_EAP_PEAP=${{env.peap}}" >> .config #身份验证
        echo "CONFIG_FIRMWARE_INCLUDE_HTTPS=${{env.https}}" >> .config #https支持

        echo "CONFIG_FIRMWARE_INCLUDE_CURL=${{env.curl}}" >> .config #curl命令支持
        echo "CONFIG_FIRMWARE_INCLUDE_SQM=${{env.sqm}}" >> .config #流控
        echo "CONFIG_FIRMWARE_INCLUDE_MSD_LITE=${{env.ltte}}" >> .config #ltel
        echo "CONFIG_FIRMWARE_INCLUDE_LRZSZ=${{env.lrzsz}}" >> .config #上传下载工具
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=${{env.smartdns}}" >> .config #smardns服务器
        #下载工具
        echo "CONFIG_FIRMWARE_INCLUDE_ARIA_WEB_CONTROL=${{env.ariaweb}}" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ARIA=${{env.aria2}}" >> .config
        #校园相关
        #echo "CONFIG_FIRMWARE_INCLUDE_MINIEAP=${{env.minieap}}" >> .config
        #echo "CONFIG_FIRMWARE_INCLUDE_DOGCOM=${{env.dogcom}}" >> .config
        #校园网相关结束
        #########################################################################################
        #自定义添加其它功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
        #格式如下：
        #sed -i '/自定义项/d' .config
        #echo "自定义项=y" >> .config
        sed -i "s/FIRMWARE_BUILDS_REV=.*/FIRMWARE_BUILDS_REV=${{ github.event.inputs.firmwarever }}/g" ./versions.inc
        echo '更新版本号时间'
        #########################################################################################
    - name: Build firmware
      run: |
        cd $WORK_PATH
        sudo make ${{ env.model }} TOOLCHAIN=mipsel-linux-musl
        echo "FIRMWARE_DATEPREFIX=$(date +"%Y%m%d")" >> $GITHUB_ENV
    - name: Organize firmware files
      id: organize
      run: |
        mkdir -p $FIRMWARE_PATH/
        cd $WORK_PATH/trunk/images
        for firmwarefile in $(ls *.trx)
        do sudo mv $firmwarefile $FIRMWARE_PATH/${FIRMWARE_DATEPREFIX}"_"${FIRMWARE_AUTHOR}"_"${{ env.model }}"_kernal4.4.trx"
        done
        cd $FIRMWARE_PATH
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "STATUS=success" >> $GITHUB_ENV
    - name : Upload packages
      uses: actions/upload-artifact@main
      if: env.STATUS == 'success'
      with:
        name: tsl0922-Padavan44-packages
        path: ${{ env.FIRMWARE }}
